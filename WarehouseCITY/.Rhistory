mutate(type = as.factor(type))
##Import OC data - current parcels are useless
sf::st_layers(dsn = OC_dir)
#OC_parcels <- sf::st_read(dsn=OC_dir, quiet = TRUE, type = 3)
#class(st_geometry(OC_parcels))
#FIXME - OC parcels are useless
##combine RivCo and SBDCo spatial data frames for display
##Select and rename columns to make everything match
names(parcels_join_yr)
names(SBD_warehouse_ltInd)
##Note that we can always add other columns if they are useful for display
narrow_RivCo_parcels <- parcels_join_yr %>%
dplyr::select(APN, SHAPE_Area, class, type, SHAPE, YEAR_BUILT) %>%
clean_names() %>%
st_cast(to = 'POLYGON') #%>%
##Function required to rename sf column because sf package is dumb about this
rename_geometry <- function(g, name){
current = attr(g, "sf_column")
names(g)[names(g)==current] = name
st_geometry(g)=name
g
}
narrow_RivCo_parcels <- rename_geometry(narrow_RivCo_parcels, 'geometry') %>%
mutate(county = 'Riverside')
names(narrow_RivCo_parcels)
narrow_SBDCo_parcels <- SBD_warehouse_ltInd %>%
mutate(year_built = BASE_YEAR) %>%
dplyr::select(APN, SHAPE_AREA, class, type, geometry, year_built) %>%
clean_names() %>%
mutate(county = 'San Bernadino')
## Remove big raw files and save .RData file to app directory
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels)
str(LA_industrial_100k_parcels)
narrow_LA_parcels <- rename_geometry(LA_industrial_100k_parcels, 'geometry') %>%
mutate(type = as.factor(type), county = 'Los Angeles')
rm(ls = parcels, crest_property, crest_property_slim, SBD_parcels, crest_property_solo,
crest_property_dups, crest_property_dups2, crest_property_tidy) #%>%
gc()
memory.size()
##Bind two counties together and put in null 1776 year for missing or 0 warehouse year built dates
final_parcels <- bind_rows(narrow_RivCo_parcels, narrow_SBDCo_parcels, narrow_LA_parcels) %>%
mutate(year.built= ifelse(year_built <= 1910, 'unknown', year_built),
year_built = ifelse(year_built <= 1910, 1910, year_built)) %>%
mutate(floorSpace.th.sq.ft = shape_area*0.65/1000) %>%
filter(floorSpace.th.sq.ft > 100)
##Bind two counties together and put in null 1776 year for missing or 0 warehouse year built dates
final_parcels <- bind_rows(narrow_RivCo_parcels, narrow_SBDCo_parcels, narrow_LA_parcels) %>%
mutate(year.built= ifelse(year_built <= 1910, 'unknown', year_built),
year_built = ifelse(year_built <= 1910, 1910, year_built)) %>%
mutate(floorSpace.th.sq.ft = shape_area*0.65/1000) %>%
filter(floorSpace.th.sq.ft > 100) %>%
mutate(yr_bin = as.factor(case_when(
year_built == 1910 ~ 'unknown',
year_built < 1972 & year_built > 1910 ~ 'Before 1972',
year_built >= 1972 & year_built < 1982 ~ '1972 - 1981',
year_built >= 1982 & year_built < 1992 ~ '1982 - 1991',
year_built >= 1992 & year_built < 2002 ~ '1992 - 2001',
year_built >= 2002 & year_built < 2012 ~ '2002 - 2011',
year_built >= 2012 & year_built < 2022 ~ '2012 - 2021'
)))
final_parcels$yr_bin <- factor(final_parcelsByYr$yr_bin,
levels = c(  'unknown',
'Before 1972',
'1972 - 1981',
'1982 - 1991',
'1992 - 2001',
'2002 - 2011',
'2012 - 2021' ))
final_parcels$yr_bin <- factor(final_parcels$yr_bin,
levels = c(  'unknown',
'Before 1972',
'1972 - 1981',
'1982 - 1991',
'1992 - 2001',
'2002 - 2011',
'2012 - 2021' ))
paletteYr <- colorFactor(palette = 'inferno',
levels = final_parcelsByYr$yr_bin)
paletteYr <- colorFactor(palette = 'inferno',
levels = final_parcels$yr_bin)
centroids <- final_parcels %>%
st_centroid()
summary_counts <- final_parcels %>%
as.data.frame() %>%
group_by(class, type) %>%
summarize(count = n(), .groups = 'drop')
rm(ls = LA_100k_parcels, LA_industrial_100k_parcels, narrow_LA_parcels, narrow_RivCo_parcels, narrow_SBDCo_parcels,
parcels_join_yr, parcels_lightIndustry, SBD_warehouse_ltInd, parcels_warehouse)
sf::st_layers(dsn = AQMD_dir)
AQMD_boundary <-  sf::st_read(dsn = AQMD_dir, quiet = TRUE, type = 3) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
setwd(app_dir)
save.image('.RData')
setwd(warehouse_dir)
save.image('.RData')
##import truck traffic data
##import truck traffic data
#truckTraffic <- sf::st_read(dsn = truck_dir) %>%
##import truck traffic data
#truckTraffic <- sf::st_read(dsn = truck_dir) %>%
#  mutate(TruckAADT = as.numeric(TruckAADT),
##import truck traffic data
#truckTraffic <- sf::st_read(dsn = truck_dir) %>%
#  mutate(TruckAADT = as.numeric(TruckAADT),
#         Lat_S_or_W = as.numeric(Lat_S_or_W),
##import truck traffic data
#truckTraffic <- sf::st_read(dsn = truck_dir) %>%
#  mutate(TruckAADT = as.numeric(TruckAADT),
#         Lat_S_or_W = as.numeric(Lat_S_or_W),
#         Lat_N_or_E = as.numeric(Lat_N_or_E),
##import truck traffic data
#truckTraffic <- sf::st_read(dsn = truck_dir) %>%
#  mutate(TruckAADT = as.numeric(TruckAADT),
#         Lat_S_or_W = as.numeric(Lat_S_or_W),
#         Lat_N_or_E = as.numeric(Lat_N_or_E),
#        Lon_S_or_W = as.numeric(Lon_S_or_W),
#import truck traffic data
#truckTraffic <- sf::st_read(dsn = truck_dir) %>%
#  mutate(TruckAADT = as.numeric(TruckAADT),
#         Lat_S_or_W = as.numeric(Lat_S_or_W),
#         Lat_N_or_E = as.numeric(Lat_N_or_E),
#        Lon_S_or_W = as.numeric(Lon_S_or_W),
#         Lon_N_or_E = as.numeric(Lon_N_or_E)) #%>%
### Multi count parcel join fixed
### Multi count parcel join fixed
#multi_count_parcels <- final_parcels %>%
### Multi count parcel join fixed
#multi_count_parcels <- final_parcels %>%
#  as.data.frame() %>%
### Multi count parcel join fixed
#multi_count_parcels <- final_parcels %>%
#  as.data.frame() %>%
#  select(apn, shape_area) %>%
### Multi count parcel join fixed
#multi_count_parcels <- final_parcels %>%
#  as.data.frame() %>%
#  select(apn, shape_area) %>%
#  dplyr::group_by(apn, shape_area) %>%
### Multi count parcel join fixed
#multi_count_parcels <- final_parcels %>%
#  as.data.frame() %>%
#  select(apn, shape_area) %>%
#  dplyr::group_by(apn, shape_area) %>%
#  dplyr::summarize(count = n(), .groups = 'drop') %>%
### Multi count parcel join fixed
#multi_count_parcels <- final_parcels %>%
#  as.data.frame() %>%
#  select(apn, shape_area) %>%
#  dplyr::group_by(apn, shape_area) %>%
#  dplyr::summarize(count = n(), .groups = 'drop') %>%
#  filter(count > 1) %>%
#single_count_parcels <- final_parcels %>%
#single_count_parcels <- final_parcels %>%
#  as.data.frame() %>%
shiny::runApp('C:/Dev/WarehouseMap/WarehouseCITY')
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
runApp()
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
runApp()
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
View(final_parcels)
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
##QA list of missing warehouses and not warehouse parcel numbers
not_warehouse <- c('173180011',
'424070001',
'111924107',
'046706101',
'044603337',
'151070007',
'103303101',
'047203107',
'519180026',
'77')
runApp('C:/Dev/WarehouseMap/WarehouseCITY')
shiny::runApp()
runApp()
runApp()
runApp()
```{r}
##Add variables for Heavy-duty diesel truck calculations
#Truck trips = WAIRE 100k sq.ft. number
Truck_trips_1000sqft <- 0.67
DPM_VMT_2022_lbs <- 0.00037807
NOX_VMT_2022_lbs <- 0.01098794
CO2_VMT_2022_lbs <- 4.21520828
trip_length <- 50
runApp()
runApp()
runApp()
runApp()
## calculate summary stats
runApp()
While the dataset is awesome, it does have a number of limitations.  Two key issues are actively being investigated.
* Classification - warehouses and light industrial are large classes of parcels that include many different types of buildings.  This analysis tool is meant to specifically characterize warehouses.  However, in Riverside County, a very large fraction of all warehouses are classified as light industrial in the database.  While we faithfully represent what is in the assessor dataset, some of the parcels may be misclassified. We are actively working to improve the dataset to better represent the use of the building.
* Duplicate records - some parcel numbers have multiple records for build year which can lead to double-counting area, truck trips, and emissions.  When duplicates occur, we are using the earliest build year from the parcel database which may not account for parcel modifications or expansions.
*Emissions calculations - emissions are based on a set of emissions factors that do not account for the heterogeneity of truck trips by warehouse type (cold storage, dry storage, distribution facilities, etc.), nor the variability in truck trip distances based on location of the facility. This information is not available at the time but could be incorporated in later versions if a reliable dataset becomes available.
While the dataset is awesome, it does have a number of limitations.  Two key issues are actively being investigated.
* Classification - warehouses and light industrial are large classes of parcels that include many different types of buildings.  This analysis tool is meant to specifically characterize warehouses.  However, in Riverside County, a very large fraction of all warehouses are classified as light industrial in the database.  While we faithfully represent what is in the assessor dataset, some of the parcels may be misclassified. We are actively working to improve the dataset to better represent the use of the building.
* Duplicate records - some parcel numbers have multiple records for build year which can lead to double-counting area, truck trips, and emissions.  When duplicates occur, we are using the earliest build year from the parcel database which may not account for parcel modifications or expansions.
* Emissions calculations - emissions are based on a set of emissions factors that do not account for the heterogeneity of truck trips by warehouse type (cold storage, dry storage, distribution facilities, etc.), nor the variability in truck trip distances based on location of the facility. This information is not available at the time but could be incorporated in later versions if a reliable dataset becomes available.
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Warehouse City Documentation (alpha v1.01 - released May 20, 2022)
===================================
shiny::runApp()
shiny::runApp()
runApp()
https://gis2.rivco.org/
runApp()
runApp()
While the dataset is awesome, it does have a number of limitations.  Multiples issues are being investigated or quality assured as we work to improve the utility of this tool.
* Classification - warehouses and light industrial are large classes of parcels that include many different types of buildings.  This analysis tool is meant to specifically characterize warehouses.  However, in Riverside and San Bernadino County, a very large fraction of all warehouses are not classified using the words 'warehouse', 'distribution', or 'storage' in the assessor descriptions.  Instead, many are classified as 'light industrial' and other similar terms in the database.  While we faithfully represent the description in the assessor dataset, some of the parcels may be misclassified to warehouse through our inclusion of these terms. We are actively working to improve the dataset to better represent the use of the building as we visually inspect the dataset and gain local on-the-ground knowledge on individual facilities.
* Duplicate records - some parcel numbers have multiple records for build year which can lead to double-counting area, truck trips, and emissions.  When duplicates occur, we are using the earliest build year from the parcel database which may not account for parcel modifications or expansions.
* Emissions calculations - emissions are based on a set of emissions factors that do not account for the heterogeneity of truck trips by warehouse type (cold storage, dry storage, distribution facilities, etc.), nor the variability in truck trip distances based on location of the facility. This information is not readily available at the time but could be incorporated in later versions if and when reliable datasets become available.
* Orange County data is not directly from the assessor's office and is likely less reliable than the other three counties as a result.
* We are working to improve the parcel information for this entire dataset. If you have any information on individual parcels that you believe are currently misclassified, please contact us at the email below and we'll work to improve our classification.
* A large number (8,644) of sub 1-acre warehouses are excluded from this analysis as the application slows down significantly when displaying these micro-warehouses.  The total area of the warehouses with less than 1-acre parcels is 1.7x10^8 sq.ft.
runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
install.packages(...)
install.packages('shiny')
install.packages('tidyverse')
install.packages('htmltools')
install.packages('leaflet')
install.packages('sf')
install.packages('DT')
install.packages('markdown')
library(shiny)
library(leaflet)
library(htmltools)
#library(gghighlight)
#library(spatstat)
library(sf)
#library(gstat)
#library(spdep)
#library(raster)
#library(rgdal)
library(tidyverse)
library(DT)
library(markdown)
## Define UI for application that displays warehouses
# Show app name and logos
ui <- fluidPage(title = 'Warehouse CITY',
tags$style(type="text/css", "div.info.legend.leaflet-control br {clear: both;}"),
titlePanel(
fluidRow(column(1),
column(3,
div(style = 'height:60px; font-size: 30px;',
'Warehouse CITY')),
column(2, shiny::img(height = 60, src = 'Logo_Redford.jpg')),
column(2, shiny::img(height = 38, src = 'Logo.png')))
),
##Create a tabset display to have a readme file and main warehouse page
tabsetPanel(
tabPanel('Dashboard',
# Display slider bar selections, checkbox, and summary text
fluidRow(column(1),
column(3, sliderInput('year_slider', 'Year built', min = min(final_parcels$year_built), max(final_parcels$year_built),
value = range(final_parcels$year_built), step = 1, sep ='')),
column(3, sliderInput('radius', 'Selection radius (km)', min = 1, max = 10, value = 5, step =1))#,
#column(3, checkboxInput('inputId' = 'DetailTable', label = 'Display detailed table of selected warehouses',
#  value = FALSE))
),
fluidRow(column(1),
column(4, checkboxInput(inputId = 'UnknownYr', label = 'Display parcels with unknown year built information',
value = TRUE)),
column(4, textOutput('text2'))),
fluidRow(column(1),
column(5, align = 'center', dataTableOutput('Summary'))
),
# Display map and table
fluidRow(
column(1),
column(8, align = 'center', leafletOutput("map", height = 600))
),
fluidRow(column(2),
column(6, align = 'center', dataTableOutput('warehouseDF'))),
),
tabPanel('Readme',
fluidRow(includeMarkdown("readme.md"))
)
)
)
runApp()
shiny::runApp()
Directly above the map is a table that provides summary statistics for the selected warehouses. The summary table includes the number of warehouses, the acreage of the warehouse footprints, the total building floor space in units of square feet, the number of estimated truck trips, and an estimate of the daily diesel PM~2.5~, NOx, and CO2 emissions from those truck trips. The table updates as the user selects different year ranges or clicks on different sections of the map. Note that this estimate does not include car trips to and from warehouses in the emissions calculation. The details on how these are calculated are discussed further in the methods section.
runApp()
runApp()
The Warehouse CITY (communitY Cumulative Impact Tool) dashboard is a tool developed to help visualize and quantify the development of warehouses in Southern California. This dashboard is a result of a collaboration between the Redford Conservancy at Pitzer College and Radical Research LLC. The goal of this tool is to help community organizations understand and quantify the cumulative impacts of existing and planned warehouses. It builds off work done at the Redford Conservancy and published in the Los Angeles Times.
https://www.latimes.com/opinion/story/2022-05-01/inland-empire-warehouse-growth-map-environment
# Navigating the tool
runApp()
runApp()
runApp()
CO2
Warehouse CITY Documentation (alpha v1.04 - released June 10, 2022)
===================================
runApp()
# Limitations
runApp()
runApp()
shiny::runApp()
shiny::runApp()
final_parcels$size_bin <- factor(final_parcels$size_bin,
levels = c('28,000 to 100,000',
'100,000 to 250,000',
'250,000 to 500,000',
'500,000 to 1,000,000',
'1,000,000+'))
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(final_parcels)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
Warehouse CITY Documentation (alpha v1.06 - released July 22, 2022)
===================================
runApp()
runApp()
runApp()
If you would like to support local organizations working on land-use issues, please visit the [Redford Conservancy](https://www.pitzer.edu/redfordconservancy/) or [Riverside Neighbors Opposing Warehouses](https://tinyurl.com/RIVNOW).
runApp()
runApp()
runApp()
runApp()
install.packages(c("baseline", "bookdown", "broom", "bslib", "callr", "classInt", "DBI", "dbplyr", "downlit", "e1071", "farver", "fontawesome", "forecast", "future", "generics", "htmltools", "latticeExtra", "openair", "packrat", "parallelly", "pillar", "processx", "proxy", "ps", "quarto", "raster", "Rcpp", "recipes", "rlang", "rsconnect", "s2", "sass", "sf", "shiny", "stringi", "terra", "tibble", "tidyverse", "timeDate", "tinytex"))
load('.RData')
library(leaflet)
library(htmltools)
#library(gghighlight)
library(spatstat)
library(sf)
library(gstat)
library(spdep)
library(raster)
library(rgdal)
library(tidyverse)
map1 <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 34, lng = -117.30, zoom = 11) %>%
addProviderTiles("Esri.WorldImagery", group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
overlayGroups =c('Warehouses', 'Kernel density'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(color = ~palette(type),
group = 'Warehouses',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class, year_built))
) %>%
# addPolygons(data = circle_sf,
#              color='black') %>%
addLegend(pal = palette,
values = c('warehouse', 'light industrial'),
title = 'Parcel class') %>%
#addCircleMarkers(data = centroids,
#                 color = 'black',
#                 radius = 1,
#                 stroke = FALSE) %>%
addRasterImage(rasterIDW,
opacity = 0.8,
colors = interp_palette,
group = 'Kernel density')
congress_dir <- 'C:\Dev\spatial_data_files\CA_congressional_districts'
sf::st_layers(dsn = congress_dir)
congress_dir <- 'C:\Dev\spatial_data_files\CA_congressional_districts'
congress_dir <- 'C:\Dev\spatial_data_files\CA_congressional_districts'
sf::st_layers(dsn = congress_dir)
congress_dir <- 'C:\Dev\spatial_data_files\CA_congressional_districts'
congress_dir <- 'C:\Dev\spatial_data_files\CA_congressional_districts'
congress_dir <- file.path('C:\Dev\spatial_data_files\CA_congressional_districts')
congress_dir <- file.path('C:', 'Dev', 'spatial_data_files', 'CA_congressional_districts')
sf::st_layers(dsn = congress_dir)
cong_districts22 <- sf::st_read(dsn = congress_dir, quiet = TRUE, type = 3)
map_districts <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 34, lng = -117.30, zoom = 11) %>%
addProviderTiles("Esri.WorldImagery", group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
overlayGroups =c('Warehouses', 'Districts'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(color = ~palette(type),
group = 'Warehouses',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class, year_built))
) %>%
addPolygons(data = cong_districts22,
color = 'black',
group = 'Districts')
cong_districts22 <- sf::st_read(dsn = congress_dir, quiet = TRUE, type = 3) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
str(cong_districts22)
map_districts <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 34, lng = -117.30, zoom = 11) %>%
addProviderTiles("Esri.WorldImagery", group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
overlayGroups =c('Warehouses', 'Districts'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(color = ~palette(type),
group = 'Warehouses',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class, year_built))
) %>%
addPolygons(data = cong_districts22,
color = 'black',
group = 'Districts')
map_districts <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 34, lng = -117.30, zoom = 11) %>%
addProviderTiles("Esri.WorldImagery", group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
overlayGroups =c('Warehouses', 'Districts'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(color = ~palette(type),
group = 'Warehouses',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class, year_built))
) %>%
addPolygons(data = cong_districts22,
group = 'Districts')
map_districts
map_districts <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 34, lng = -117.30, zoom = 11) %>%
addProviderTiles("Esri.WorldImagery", group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
overlayGroups =c('Warehouses', 'Districts'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(color = ~palette(type),
group = 'Warehouses',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class, year_built))
) %>%
addPolygons(data = cong_districts22,
group = 'Districts')
palette <- colorFactor( palette = c('Blue', 'Brown'),
levels = c('warehouse', 'light industrial'))
interp_palette <- colorNumeric(palette = 'PuOr', domain = range(IDW_poly$th.sq.ft.))
map_districts <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 34, lng = -117.30, zoom = 11) %>%
addProviderTiles("Esri.WorldImagery", group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
overlayGroups =c('Warehouses', 'Districts'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(color = ~palette(type),
group = 'Warehouses',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class, year_built))
) %>%
addPolygons(data = cong_districts22,
group = 'Districts')
map_districts
load('.RData')
congress_dir <- file.path('C:', 'Dev', 'spatial_data_files', 'CA_congressional_districts')
sf::st_layers(dsn = congress_dir)
cong_districts22 <- sf::st_read(dsn = congress_dir, quiet = TRUE, type = 3) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
str(cong_districts22)
l
l
l
library(leaflet)
library(htmltools)
#library(gghighlight)
library(spatstat)
library(sf)
library(gstat)
library(spdep)
library(raster)
library(rgdal)
library(tidyverse)
congress_dir <- file.path('C:', 'Dev', 'spatial_data_files', 'CA_congressional_districts')
sf::st_layers(dsn = congress_dir)
cong_districts22 <- sf::st_read(dsn = congress_dir, quiet = TRUE, type = 3) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
str(cong_districts22)
library(shiny); runApp('app - Copy.R')
runApp('app - Copy.R')
runApp('app - Copy.R')
runApp('app - Copy.R')
shiny::runApp()
load('.RData')
runApp()
