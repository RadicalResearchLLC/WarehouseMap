t
t
t
t
rm(list =ls()) # clear environment
'%ni%' <- Negate('%in%') ## not in operator
##Libraries used in data acquisition
library(RCurl)
##Libraries used in data processing and visualization
library(tidyverse)
library(janitor)
#library(data.table)
library(readxl)
##spatial libraries and visualization annotation
library(leaflet)
library(sf)
library(rgdal)
#library(spatstat)
#library(raster)
library(htmltools)
##set working, data, and app directories
wd <- getwd()
###set data, app, and export subdirectories
app_dir <- paste0(wd, '/Warehouse Map App')
warehouse_dir <- paste0(wd, '/Warehouse_data')
output_dir <- paste0(wd, '/exports_other')
crest_dir <- paste0(warehouse_dir, '/CREST_tables.gdb')
parcel_dir <- paste0(warehouse_dir, '/ParcelAttributed.gdb')
SBD_parcel_dir <- paste0(warehouse_dir, '/SBD_Parcel')
## Acquire warehouse data files
setwd(warehouse_dir)
## List the GDB files
sf::st_layers(dsn = crest_dir)
sf::st_layers(dsn = parcel_dir)
##Import parcels and property record files for Riverside County
##st_read(type=1) is attempting to create the same sfc type for both counties
crest_property <- sf::st_read(dsn = crest_dir, layer = 'CREST_PROPERTY_CHAR')
parcels <- sf::st_read(dsn = parcel_dir, layer = 'PARCELS_CREST', quiet = TRUE, type =1)
##Read and import property record files for San Bernadino County
sf::st_layers(dsn = SBD_parcel_dir)
SBD_parcels <- sf::st_read(dsn=SBD_parcel_dir, quiet = TRUE, type = 1)
##Set minimum warehouse size for analysis in sq.ft.
sq_ft_threshold <- 100000
######Tidy up the data for use
##select just property number and year built for riverside county CREST
crest_property_slim <- crest_property %>%
dplyr::select(PIN, YEAR_BUILT) %>%
dplyr::distinct()
##filter on warehouses and light-industrial for Riverside County
##transform coordinates from Northing-Easting to Lat-Long
parcels_warehouse <- parcels %>%
mutate(class = stringr::str_to_lower(CLASS_CODE)) %>%
filter(str_detect(class, 'warehouse')) %>%
filter(SHAPE_Area > sq_ft_threshold) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
parcels_lightIndustry <- parcels %>%
mutate(class = stringr::str_to_lower(CLASS_CODE)) %>%
filter(str_detect(class, 'light industrial')) %>%
filter(SHAPE_Area > sq_ft_threshold) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
parcels_join_yr <- bind_rows(parcels_warehouse, parcels_lightIndustry) %>%
left_join(crest_property_slim, by =c('APN' = 'PIN')) %>%
unique() %>%
mutate(YEAR_BUILT = ifelse(is.na(YEAR_BUILT), 1776, YEAR_BUILT)) %>%
mutate(type = as.factor(ifelse(str_detect(class, 'warehouse'), 'warehouse', 'light industrial')))
##parse San Bernadino data codes
setwd(warehouse_dir)
SBD_codes <- read_excel('Assessor Use Codes 05-21-2012.xls') %>%
clean_names() %>%
mutate(description = str_to_lower(description),
use_code = as.numeric(use_code)) %>%
mutate(type = case_when(
str_detect(description, 'warehouse') ~ 'warehouse',
str_detect(description, 'light industrial') ~'light industrial',
TRUE ~ 'other'
)) %>%
filter(type %in% c('warehouse', 'light industrial'))  %>%
rename(class = description)
##Filter SBDCO data by warehouse and light industrial, filter by size threshold
##Fix coordinate projection
SBD_warehouse_ltInd <- inner_join(SBD_parcels, SBD_codes, by = c('TYPEUSE' = 'use_code' )) %>%
filter(SHAPE_AREA > sq_ft_threshold) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84") %>%
mutate(type = as.factor(type))
names(parcels_join_yr)
names(SBD_warehouse_ltInd)
##Note that we can always add other columns if they are useful for display
narrow_RivCo_parcels <- parcels_join_yr %>%
dplyr::select(APN, SHAPE_Area, class, type, SHAPE) %>%
clean_names() %>%
#st_cast(to = 'POLYGON') #%>%
narrow_SBDCo_parcels <- SBD_warehouse_ltInd %>%
dplyr::select(APN, SHAPE_AREA, class, type, geometry) %>%
clean_names() #%>%
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels)
##Note that we can always add other columns if they are useful for display
narrow_RivCo_parcels <- parcels_join_yr %>%
dplyr::select(APN, SHAPE_Area, class, type, SHAPE) %>%
clean_names() %>%
#st_cast(to = 'POLYGON') #%>%
narrow_SBDCo_parcels <- SBD_warehouse_ltInd %>%
dplyr::select(APN, SHAPE_AREA, class, type, geometry) %>%
clean_names() #%>%
##Note that we can always add other columns if they are useful for display
narrow_RivCo_parcels <- parcels_join_yr %>%
dplyr::select(APN, SHAPE_Area, class, type, SHAPE) %>%
clean_names() #%>%
narrow_SBDCo_parcels <- SBD_warehouse_ltInd %>%
dplyr::select(APN, SHAPE_AREA, class, type, geometry) %>%
clean_names() #%>%
##Note that we can always add other columns if they are useful for display
narrow_RivCo_parcels <- parcels_join_yr %>%
dplyr::select(APN, SHAPE_Area, class, type, SHAPE) %>%
clean_names() %>%
st_cast(to = 'POLYGON') #%>%
narrow_SBDCo_parcels <- SBD_warehouse_ltInd %>%
dplyr::select(APN, SHAPE_AREA, class, type, geometry) %>%
clean_names() #%>%
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels)
names(narrow_RivCo_parcels)
names(narrow_SBDCo_parcels)
##FIXME do multipolygon and polygon sf geometries work together?
final_parcels <- bind_rows(narrow_RivCo_parcels, narrow_SBDCo_parcels)
str(final_parcels)
parcels <- class(st_geometry(sf::st_read(dsn = parcel_dir, layer = 'PARCELS_CREST', quiet = TRUE, type = 1)))
parcels <- st_geometry(sf::st_read(dsn = parcel_dir, layer = 'PARCELS_CREST', quiet = TRUE, type = 1))
parcels <- sf::st_read(dsn = parcel_dir, layer = 'PARCELS_CREST', quiet = TRUE, type = 1))
parcels <- sf::st_read(dsn = parcel_dir, layer = 'PARCELS_CREST', quiet = TRUE, type = 3)
class(st_geometry(parcels))
SBD_parcels <- sf::st_read(dsn=SBD_parcel_dir, quiet = TRUE, type = 3)
class(st_geometry(SBD_parcels))
##Set minimum warehouse size for analysis in sq.ft.
sq_ft_threshold <- 100000
######Tidy up the data for use
##select just property number and year built for riverside county CREST
crest_property_slim <- crest_property %>%
dplyr::select(PIN, YEAR_BUILT) %>%
dplyr::distinct()
##filter on warehouses and light-industrial for Riverside County
##transform coordinates from Northing-Easting to Lat-Long
parcels_warehouse <- parcels %>%
mutate(class = stringr::str_to_lower(CLASS_CODE)) %>%
filter(str_detect(class, 'warehouse')) %>%
filter(SHAPE_Area > sq_ft_threshold) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
parcels_lightIndustry <- parcels %>%
mutate(class = stringr::str_to_lower(CLASS_CODE)) %>%
filter(str_detect(class, 'light industrial')) %>%
filter(SHAPE_Area > sq_ft_threshold) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")
parcels_join_yr <- bind_rows(parcels_warehouse, parcels_lightIndustry) %>%
left_join(crest_property_slim, by =c('APN' = 'PIN')) %>%
unique() %>%
mutate(YEAR_BUILT = ifelse(is.na(YEAR_BUILT), 1776, YEAR_BUILT)) %>%
mutate(type = as.factor(ifelse(str_detect(class, 'warehouse'), 'warehouse', 'light industrial')))
##parse San Bernadino data codes
setwd(warehouse_dir)
SBD_codes <- read_excel('Assessor Use Codes 05-21-2012.xls') %>%
clean_names() %>%
mutate(description = str_to_lower(description),
use_code = as.numeric(use_code)) %>%
mutate(type = case_when(
str_detect(description, 'warehouse') ~ 'warehouse',
str_detect(description, 'light industrial') ~'light industrial',
TRUE ~ 'other'
)) %>%
filter(type %in% c('warehouse', 'light industrial'))  %>%
rename(class = description)
##Filter SBDCO data by warehouse and light industrial, filter by size threshold
##Fix coordinate projection
SBD_warehouse_ltInd <- inner_join(SBD_parcels, SBD_codes, by = c('TYPEUSE' = 'use_code' )) %>%
filter(SHAPE_AREA > sq_ft_threshold) %>%
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84") %>%
mutate(type = as.factor(type))
names(parcels_join_yr)
names(SBD_warehouse_ltInd)
##Note that we can always add other columns if they are useful for display
narrow_RivCo_parcels <- parcels_join_yr %>%
dplyr::select(APN, SHAPE_Area, class, type, SHAPE) %>%
clean_names() %>%
st_cast(to = 'POLYGON') #%>%
narrow_SBDCo_parcels <- SBD_warehouse_ltInd %>%
dplyr::select(APN, SHAPE_AREA, class, type, geometry) %>%
clean_names() #%>%
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels)
st_geometry(narrow_RivCo_parcels) <- 'geometry'
narrow_RivCo_parcels <- rename_geometry(narrow_RivCo_parcels, 'geometry')
##Function required to rename sf column because sf package is dumb about this
rename_geometry <- function(g, name){
current = attr(g, "sf_column")
names(g)[names(g)==current] = name
st_geometry(g)=name
g
}
narrow_RivCo_parcels <- rename_geometry(narrow_RivCo_parcels, 'geometry')
names(narrow_RivCo_parcels)
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels)
##FIXME do multipolygon and polygon sf geometries work together?
final_parcels <- bind_rows(narrow_RivCo_parcels, narrow_SBDCo_parcels)
str(final_parcels)
## Remove big raw files and save .RData file to app directory
rm(ls = parcels, crest_property, crest_property_slim, SBD_parcels)
setwd(app_dir)
save.image('.RData')
##FIXME - The map will be done in the app - this is just for testing purposes
palette <- colorFactor( palette = c('Blue', 'Brown'),
levels = c('warehouse', 'light industrial'))
#str(parcels_join_yr)
#Create leaflet map with legend
map1 <- leaflet(data = final_parcels) %>%
addTiles() %>%
setView(lat = 33.92, lng = -117.30, zoom = 12) %>%
addProviderTiles("Esri.WorldImagery",
group = 'Imagery') %>%
addLayersControl(baseGroups = c('Basemap', 'Imagery'),
#overlayGroups =c('Riverside', 'San Bernadino')
) %>%
addPolygons(color = ~palette(type),
#group = 'Riverside',
label = ~htmlEscape(paste('Parcel', apn, ';', round(shape_area,0), 'sq.ft.', class))
) %>%
#addPolygons(data = SBD_warehouse_ltInd,
#            color = ~palette(type),
#            group = 'San Bernadino') %>%
addLegend(pal = palette, values = c('warehouse', 'light industrial'),
title = 'Parcel class') #%>%
map1
shiny::runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(title = 'Warehouse CITY',
tags$style(type="text/css", "div.info.legend.leaflet-control br {clear: both;}"),
titlePanel(
fluidRow(column(width =9,
div(style = 'height:60px; font-size: 50px;',
'Warehouse CITY')),
column(3, shiny::img(height = 60, src = 'Logo.png')))
),
# Display map and bar chart
fluidRow(
column(10, align = 'center', leafletOutput("map", height = 800))
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(title = 'Warehouse CITY',
tags$style(type="text/css", "div.info.legend.leaflet-control br {clear: both;}"),
titlePanel(
fluidRow(column(width =9,
div(style = 'height:60px; font-size: 50px;',
'Warehouse CITY')),
column(3, shiny::img(height = 60, src = 'Logo.png')))
),
# Display map and bar chart
fluidRow(
column(10, align = 'center', leafletOutput("map", height = 800))
)
)
