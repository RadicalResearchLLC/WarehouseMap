mutate(row = row_number()) |>
st_make_valid()
LA_interMulti <- uniqueParcel |>
st_join(LA_industrial_parcels, join = st_equals) |>
st_set_geometry(value = NULL) |>
group_by(row) |>
summarize(count = n()) |>
filter(count > 1) |>
left_join(uniqueParcel, by = 'row') |>
st_as_sf()
LA_unique <- uniqueParcel |>
st_join(LA_industrial_parcels, join = st_equals) |>
st_set_geometry(value = NULL) |>
group_by(row) |>
summarize(count = n()) |>
filter(count == 1) |>
left_join(uniqueParcel, by = 'row') |>
st_as_sf() |>
st_join(LA_industrial_parcels, join = st_equals) |>
select(-row) |>
filter(!is.na(apn))
LA_Multi <- LA_interMulti |>
st_join(LA_industrial_parcels, join = st_equals) |>
group_by(row, count, Shape, shape_area, class, type) |>
summarize(apn = first(apn), year_built = min(year_built), .groups = 'drop') |>
select(-row)
final_LA <- bind_rows(LA_unique, LA_Multi)
st_geometry(final_LA) <- 'geometry'
narrow_LA_parcels <- final_LA |>
mutate(type = as.factor(type), county = 'Los Angeles')
LA_noAPN <- uniqueParcel |>
st_join(LA_industrial_parcels, join = st_equals) |>
st_set_geometry(value = NULL) |>
group_by(row) |>
summarize(count = n()) |>
filter(count == 1) |>
left_join(uniqueParcel, by = 'row') |>
st_as_sf() |>
st_join(LA_industrial_parcels, join = st_equals) |>
#select(row) |>
filter(is.na(apn))
LA_noAPN2 <- LA_noAPN |>
select(row, Shape) |>
st_make_valid() |>
st_join(LA_industrial_parcels, join = st_contains)
rm(ls = LA_geometry, LA_industrial_parcels_10k,
LA_parcels_precise, unique2, Geo_only, LA_warehouse_parcels,
LA_industrial_parcels, LA_Multi, LA_unique, LA_interMulti, final_LA, uniqueParcel)
rm(ls = LA_noAPN, LA_noAPN2, noAPN, LA_use_type_code)
setwd(LA_tidy)
unlink('LA_filtered_parcels.shp')
st_write(narrow_LA_parcels, 'LA_filtered_parcels.shp')
setwd(wd)
#rm(list =ls()) # clear environment
'%ni%' <- Negate('%in%') ## not in operator
gc()
##Libraries used in data processing and visualization
library(tidyverse)
library(janitor)
library(readxl)
##spatial libraries and visualization annotation
#library(leaflet)
library(sf)
#library(htmltools)
#library(rmapshaper)
library(pdftools)
library(tesseract)
library(tidygeocoder)
##set working, data, and app directories
wd <- getwd()
###set data, app, and export subdirectories
app_dir <- paste0(wd, '/WarehouseCITY')
warehouse_dir <- paste0(wd, '/Warehouse_data')
output_dir <- paste0(wd, '/exports_other')
calEJScreen_dir <- paste0(wd, '/calenviroscreen40')
shapefile_dir <- paste0(app_dir, '/shapefile')
geojson_dir <- paste0(app_dir, '/geoJSON')
jurisdiction_jur <- paste0(wd, '/community_geojson/')
##Set minimum size for analysis in thousand sq.ft. for non-warehouse classified
##FIXME - should be acreage based
sq_ft_threshold_WH <- 28000
sq_ft_threshold_maybeWH <- 150000
source('Riverside.R')
source('SanBernardino.R')
SBD_codes <- readxl::read_excel('Assessor Use Codes 05-21-2012.xls') |>
janitor::clean_names() |>
mutate(description = str_to_lower(description),
use_code = as.numeric(use_code)) |>
mutate(type = case_when(
str_detect(description, 'warehouse') ~ 'warehouse',
str_detect(description, 'light industrial') ~'other',
str_detect(description, 'flex') ~ 'other',
str_detect(description, 'storage') ~ 'other',
TRUE ~ 'Unselected'
)) |>
filter(type %in% c('warehouse', 'other'))  |>
rename(class = description) |>
filter(class %ni% c('retail warehouse', 'lumber storage', 'mini storage (public)',
'storage yard', 'auto storage yard', 'boat storage yard',
'grain storage', 'potato storage', 'bulk fertilizer storage',
'mini-storage warehouse')) #|>
##Filter SBDCO data by warehouse and light industrial, filter by size threshold
##Fix coordinate projection
SBD_warehouse_ltInd <- inner_join(SBD_parcels, SBD_codes, by = c('TYPEUSE' = 'use_code' )) |>
mutate(threshold_maybeWH = ifelse(SHAPE_AREA > sq_ft_threshold_maybeWH, 1,0)) |>
mutate(exclude = ifelse(type == 'warehouse', 0,
ifelse(threshold_maybeWH == 1, 0, 1))) |>
filter(exclude == 0) |>
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84") |>
mutate(type = as.factor(type))
names(SBD_parcels)
SBD_dir <- paste0(warehouse_dir, '/SBD_Parcel')
## Data from https://open.sbcounty.gov/datasets/countywide-parcels/about
##Read and import property record files for San Bernardino County
sf::st_layers(dsn = SBD_dir)
SBD_parcels <- sf::st_read(dsn=SBD_dir, quiet = TRUE, type = 3)
##parse SBD data codes
setwd(warehouse_dir)
SBD_codes <- readxl::read_excel('Assessor Use Codes 05-21-2012.xls') |>
janitor::clean_names() |>
mutate(description = str_to_lower(description),
use_code = as.numeric(use_code)) |>
mutate(type = case_when(
str_detect(description, 'warehouse') ~ 'warehouse',
str_detect(description, 'light industrial') ~'other',
str_detect(description, 'flex') ~ 'other',
str_detect(description, 'storage') ~ 'other',
TRUE ~ 'Unselected'
)) |>
filter(type %in% c('warehouse', 'other'))  |>
rename(class = description) |>
filter(class %ni% c('retail warehouse', 'lumber storage', 'mini storage (public)',
'storage yard', 'auto storage yard', 'boat storage yard',
'grain storage', 'potato storage', 'bulk fertilizer storage',
'mini-storage warehouse')) #|>
##Filter SBDCO data by warehouse and light industrial, filter by size threshold
##Fix coordinate projection
SBD_warehouse_ltInd <- inner_join(SBD_parcels, SBD_codes, by = c('TYPEUSE' = 'use_code' )) |>
mutate(threshold_maybeWH = ifelse(SHAPE_AREA > sq_ft_threshold_maybeWH, 1,0)) |>
mutate(exclude = ifelse(type == 'warehouse', 0,
ifelse(threshold_maybeWH == 1, 0, 1))) |>
filter(exclude == 0) |>
st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84") |>
mutate(type = as.factor(type))
## add year built and county columns
## select key columns
narrow_SBDCo_parcels <- SBD_warehouse_ltInd |>
mutate(year_built = BASE_YEAR) |>
dplyr::select(APN, SHAPE_AREA, class, type, geometry, year_built) |>
janitor::clean_names() |>
mutate(county = 'San Bernardino')
# Import DataTree Year_built info
DataTree <- readxl::read_excel('SBDCo_warehouse_list2_Output.xlsx') |>
janitor::clean_names() |>
select(apn_formatted, apn_unformatted, year_built, year_built_effective)
#identify and fix bad year built parcels for SBDCo
noYearValue <- DataTree |>
filter(is.na(year_built) | year_built == 0)
wYearValue <- DataTree |>
filter(!is.na(year_built)) |>
distinct() |>
filter(year_built > 1850)
compare <- narrow_SBDCo_parcels |>
mutate(apn_formatted = str_c(str_sub(apn, 1, 4), '-',
str_sub(apn, 5, 7), '-',
str_sub(apn, 8, 9), '-',
'0000')) |>
rename(year_base = year_built) |>
left_join(wYearValue, by = 'apn_formatted') |>
mutate(diff_yr = year_built - year_base) #|>
narrow_SBDCo_parcels2 <- compare |>
mutate(year_built2 = ifelse(is.na(year_built), year_base, year_built)) |>
dplyr::select(apn, shape_area, class, type, geometry, year_built2, county) |>
rename(year_built = year_built2)
rm(ls = DataTree, compare, narrow_SBDCo_parcels, noYearValue, SBD_codes, SBD_parcels,
SBD_warehouse_ltInd, wYearValue)
setwd(wd)
#source('LosAngeles.R')
#source('Orange.R')
narrow_OC_parcels <- sf::st_read('OC_whFixed.geojson') |>
select(-address2) |>
select(apn, shape_area, class, type, built_year, geometry, county) |>
rename(year_built = built_year)
narrow_LA_parcels <- sf::st_read(dsn = 'C:/Dev/WarehouseMap/Warehouse_data/LAfiltered_shp') |>
select(-count)
gc()
narrow_OC_parcels<- st_make_valid(narrow_OC_parcels)
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels2)
str(narrow_LA_parcels)
str(narrow_OC_parcels)
gc()
##Bind two counties together and put in null 1776 year for missing or 0 warehouse year built dates
joined_parcels <- bind_rows(narrow_RivCo_parcels, narrow_SBDCo_parcels2, narrow_LA_parcels, narrow_OC_parcels) |>
mutate(year_chr = ifelse(year_built <= 1910, 'unknown', year_built),
year_built = ifelse(year_built <= 1980, 1980, year_built)) |>
mutate(floorSpace.sq.ft = round(shape_area*0.55, 0),
shape_area = round(shape_area, 0)) |>
#filter(floorSpace.th.sq.ft > 100) |>
mutate(exclude = ifelse(floorSpace.sq.ft > sq_ft_threshold_WH, 0, 1)) #|>
rm(ls = LA_warehouse_parcels, narrow_LA_parcels, narrow_RivCo_parcels, narrow_SBDCo_parcels, narrow_SBDCo_parcels2, narrow_OC_parcels)
source('QA_list.R')
joined_parcels <- joined_parcels |>
filter(apn %ni% not_warehouse) #|>
sf_use_s2(FALSE)
area <- sf::st_area(joined_parcels)
sub1acre_warehouses <- joined_parcels |>
mutate(shape_area2 = round(as.numeric(area*10.76391), -2)) |>
select(-shape_area) |>
filter(exclude == 1)
final_parcels <- joined_parcels |>
mutate(shape_area2 = round(as.numeric(area*10.76391), -2)) |>
select(-shape_area) |>
filter(exclude == 0) |>
st_make_valid()
##import
setwd(wd)
jurisdictions <- sf::st_read(dsn = paste0(jurisdiction_jur, 'SoCal_jurisdictions.geojson')) |>
clean_names()
##Import CalEnviroScreen
CalEJ4 <- sf::st_read(dsn = calEJScreen_dir, quiet = TRUE, type = 3) |>
filter(County %in% c('Riverside', 'San Bernardino', 'Los Angeles', 'Orange')) |>
select(Tract, TotPop19, ApproxLoc, CIscoreP, CIscore, geometry, DieselPM_P) |>
#filter(CIscoreP >= 75) |>
st_transform(crs = 4326)
plannedWH.url <- 'https://raw.githubusercontent.com/RadicalResearchLLC/PlannedWarehouses/main/CEQA_WH.geojson'
plannedWarehouses <- st_read(plannedWH.url) |>
st_transform(crs = 4326)
shape_area <- st_area(plannedWarehouses)
planned_tidy <- plannedWarehouses |>
mutate(shape_area =  round(as.numeric(10.764*shape_area), -3),
class = 'Planned and Approved',
year_chr = 'future',
year_built = 2025,
type = 'warehouse',
row = row_number())
planned_tidy <- plannedWarehouses |>
mutate(shape_area =  round(as.numeric(10.764*shape_area), -3),
class = stage_pending_approved,
year_chr = 'future',
year_built = 2025,
type = 'warehouse',
row = row_number())
planned_tidy <- plannedWarehouses |>
mutate(shape_area =  round(parcel_area, -3),
class = stage_pending_approved,
year_chr = 'future',
year_built = 2025,
type = 'warehouse',
row = row_number()) |>
select(-parcel_area)
Counties <- sf::st_read(dsn = 'C:/Dev/WarehouseMap/community_geojson/California_County_Boundaries.geojson') |>
filter(COUNTY_NAME %in% c('Los Angeles', 'Orange', 'Riverside', 'San Bernardino')) |>
select(COUNTY_NAME, geometry) |>
rename(county = COUNTY_NAME)
planned_final <- planned_tidy |>
st_centroid() |>
st_join(Counties) |>
st_set_geometry(value = NULL) |>
inner_join(planned_tidy) |>
filter(row != 342) |>
st_as_sf() |>
st_transform(crs=4326)  |>
select(-row) |>
mutate(floorSpace.sq.ft = 0.55*shape_area) |>
rename(category = class)
planned_tidy <- plannedWarehouses |>
mutate(shape_area =  round(parcel_area, -3),
class = stage_pending_approved,
year_chr = 'future',
year_built = 2025,
type = 'warehouse',
row = row_number()) |>
select(-parcel_area, -stage_pending_approved)
planned_tidy <- plannedWarehouses |>
mutate(shape_area =  round(parcel_area, -3),
class = stage_pending_approved,
year_chr = 'future',
year_built = 2025,
type = 'warehouse',
row = row_number()) |>
select(-parcel_area, -stage_pending_approved)
Counties <- sf::st_read(dsn = 'C:/Dev/WarehouseMap/community_geojson/California_County_Boundaries.geojson') |>
filter(COUNTY_NAME %in% c('Los Angeles', 'Orange', 'Riverside', 'San Bernardino')) |>
select(COUNTY_NAME, geometry) |>
rename(county = COUNTY_NAME)
planned_final <- planned_tidy |>
st_centroid() |>
st_join(Counties) |>
st_set_geometry(value = NULL) |>
inner_join(planned_tidy) |>
filter(row != 342) |>
st_as_sf() |>
st_transform(crs=4326)  |>
select(-row) |>
mutate(floorSpace.sq.ft = 0.55*shape_area) |>
rename(category = class)
#rm(list =ls()) # clear environment
'%ni%' <- Negate('%in%') ## not in operator
gc()
##Libraries used in data processing and visualization
library(tidyverse)
library(janitor)
library(readxl)
##spatial libraries and visualization annotation
#library(leaflet)
library(sf)
#library(htmltools)
#library(rmapshaper)
library(pdftools)
library(tesseract)
library(tidygeocoder)
##set working, data, and app directories
wd <- getwd()
###set data, app, and export subdirectories
app_dir <- paste0(wd, '/WarehouseCITY')
warehouse_dir <- paste0(wd, '/Warehouse_data')
output_dir <- paste0(wd, '/exports_other')
calEJScreen_dir <- paste0(wd, '/calenviroscreen40')
shapefile_dir <- paste0(app_dir, '/shapefile')
geojson_dir <- paste0(app_dir, '/geoJSON')
jurisdiction_jur <- paste0(wd, '/community_geojson/')
##Set minimum size for analysis in thousand sq.ft. for non-warehouse classified
##FIXME - should be acreage based
sq_ft_threshold_WH <- 28000
sq_ft_threshold_maybeWH <- 150000
source('Riverside.R')
source('SanBernardino.R')
#source('LosAngeles.R')
#source('Orange.R')
narrow_OC_parcels <- sf::st_read('OC_whFixed.geojson') |>
select(-address2) |>
select(apn, shape_area, class, type, built_year, geometry, county) |>
rename(year_built = built_year)
narrow_LA_parcels <- sf::st_read(dsn = 'C:/Dev/WarehouseMap/Warehouse_data/LAfiltered_shp') |>
select(-count)
gc()
narrow_OC_parcels<- st_make_valid(narrow_OC_parcels)
str(narrow_RivCo_parcels)
str(narrow_SBDCo_parcels2)
str(narrow_LA_parcels)
str(narrow_OC_parcels)
gc()
##Bind two counties together and put in null 1776 year for missing or 0 warehouse year built dates
joined_parcels <- bind_rows(narrow_RivCo_parcels, narrow_SBDCo_parcels2, narrow_LA_parcels, narrow_OC_parcels) |>
mutate(year_chr = ifelse(year_built <= 1910, 'unknown', year_built),
year_built = ifelse(year_built <= 1980, 1980, year_built)) |>
mutate(floorSpace.sq.ft = round(shape_area*0.55, 0),
shape_area = round(shape_area, 0)) |>
#filter(floorSpace.th.sq.ft > 100) |>
mutate(exclude = ifelse(floorSpace.sq.ft > sq_ft_threshold_WH, 0, 1)) #|>
rm(ls = LA_warehouse_parcels, narrow_LA_parcels, narrow_RivCo_parcels, narrow_SBDCo_parcels, narrow_SBDCo_parcels2, narrow_OC_parcels)
source('QA_list.R')
joined_parcels <- joined_parcels |>
filter(apn %ni% not_warehouse) #|>
sf_use_s2(FALSE)
area <- sf::st_area(joined_parcels)
sub1acre_warehouses <- joined_parcels |>
mutate(shape_area2 = round(as.numeric(area*10.76391), -2)) |>
select(-shape_area) |>
filter(exclude == 1)
final_parcels <- joined_parcels |>
mutate(shape_area2 = round(as.numeric(area*10.76391), -2)) |>
select(-shape_area) |>
filter(exclude == 0) |>
st_make_valid()
##import
setwd(wd)
jurisdictions <- sf::st_read(dsn = paste0(jurisdiction_jur, 'SoCal_jurisdictions.geojson')) |>
clean_names()
##Import CalEnviroScreen
CalEJ4 <- sf::st_read(dsn = calEJScreen_dir, quiet = TRUE, type = 3) |>
filter(County %in% c('Riverside', 'San Bernardino', 'Los Angeles', 'Orange')) |>
select(Tract, TotPop19, ApproxLoc, CIscoreP, CIscore, geometry, DieselPM_P) |>
#filter(CIscoreP >= 75) |>
st_transform(crs = 4326)
plannedWH.url <- 'https://raw.githubusercontent.com/RadicalResearchLLC/PlannedWarehouses/main/CEQA_WH.geojson'
plannedWarehouses <- st_read(plannedWH.url) |>
st_transform(crs = 4326)
planned_tidy <- plannedWarehouses |>
mutate(shape_area =  round(parcel_area, -3),
class = stage_pending_approved,
year_chr = 'future',
year_built = 2025,
type = 'warehouse',
row = row_number()) |>
select(-parcel_area, -stage_pending_approved)
Counties <- sf::st_read(dsn = 'C:/Dev/WarehouseMap/community_geojson/California_County_Boundaries.geojson') |>
filter(COUNTY_NAME %in% c('Los Angeles', 'Orange', 'Riverside', 'San Bernardino')) |>
select(COUNTY_NAME, geometry) |>
rename(county = COUNTY_NAME)
planned_final <- planned_tidy |>
st_centroid() |>
st_join(Counties) |>
st_set_geometry(value = NULL) |>
inner_join(planned_tidy) |>
filter(row != 342) |>
st_as_sf() |>
st_transform(crs=4326)  |>
select(-row) |>
mutate(floorSpace.sq.ft = 0.55*shape_area) |>
rename(category = class)
setwd(output_dir)
unlink('final_parcels_gt1acre.geojson')
st_write(final_parcels, 'final_parcels_gt1acre.geojson')
combo1 <- final_parcels |>
mutate(category = 'Existing',
unknown = ifelse(year_chr == 'unknown', TRUE, FALSE)) |>
select(apn, shape_area2, category, year_built, class, county, geometry, unknown) |>
rename(shape_area = shape_area2)
combo2 <- planned_final |>
mutate(class = 'TBD', unknown = TRUE) |>
select(name, shape_area, category, year_built, class, county, geometry, unknown) |>
rename(apn = name)
planned_final <- planned_tidy |>
st_centroid() |>
st_join(Counties) |>
st_set_geometry(value = NULL) |>
inner_join(planned_tidy) |>
filter(row != 342) |>
st_as_sf() |>
st_transform(crs=4326)  |>
select(-row) |>
mutate(floorSpace.sq.ft = 0.55*shape_area) |>
rename(category = class,
name = project)
combo2 <- planned_final |>
mutate(class = 'TBD', unknown = TRUE) |>
select(name, shape_area, category, year_built, class, county, geometry, unknown) |>
rename(apn = name)
rm(ls = plannedWarehouses, planned_tidy, plannedParcel1, plannedParcel2,)
combo_final1 <- bind_rows(combo1, combo2)
View(combo_final1)
combo2 <- planned_final |>
mutate(class = ceqa_url, unknown = TRUE) |>
select(name, shape_area, category, year_built, class, county, geometry, unknown) |>
rename(apn = name)
rm(ls = plannedWarehouses, planned_tidy, plannedParcel1, plannedParcel2,)
combo_final1 <- bind_rows(combo1, combo2)
View(combo_final1)
View(combo_final1)
planned_final <- planned_tidy |>
st_centroid() |>
st_join(Counties) |>
st_set_geometry(value = NULL) |>
inner_join(planned_tidy) |>
filter(row != 342) |>
st_as_sf() |>
st_transform(crs=4326)  |>
select(-row) |>
mutate(floorSpace.sq.ft = 0.55*shape_area) |>
rename(category = class,
name = project)
combo2 <- planned_final |>
mutate(class = ceqa_url, unknown = TRUE) |>
select(name, shape_area, category, year_built, class, county, geometry, unknown) |>
rename(apn = name)
View(combo2)
rm(ls = plannedWarehouses, planned_tidy, plannedParcel1, plannedParcel2,)
combo_final1 <- bind_rows(combo1, combo2)
View(combo_final1)
#Generate centroids for warehouse joins
combo_centroids <- combo_final1 |>
st_centroid()
#join counties
County_centroids <- combo_centroids |>
rename(county1 = county) |>
st_join(Counties) |>
mutate(countyIssue = ifelse(county1 == county, 0, 1)) |>
select(-county1, -countyIssue)
#join cities/CDPs
narrow_jurisdiction <- jurisdictions |>
select(name, geometry) |>
rename(place_name = name)
Jurisdiction_list <- County_centroids |>
st_join(narrow_jurisdiction) |>
mutate(place_name = ifelse(is.na(place_name), 'unincorporated', place_name)) |>
st_set_geometry(value = NULL)
#Final join
combo_final <- combo_final1 |>
left_join(Jurisdiction_list) |>
distinct()
setwd(geojson_dir)
unlink('finalParcels.geojson')
unlink('plannedParcels.geojson')
unlink('comboFinal.geojson')
st_write(final_parcels, 'finalParcels.geojson', append = FALSE)
st_write(planned_final, 'plannedParcels.geojson', append = FALSE)
st_write(combo_final, 'comboFinal.geojson', append = FALSE)
setwd(wd)
rm(ls = combo1, combo2, IEcounties, planned_final, final_parcels, combo_final1)
##FIXME put stats here
rm(ls = joined_parcels2, sub1acre_warehouses)
rm(ls = County_centroids, Jurisdiction_list, narrow_jurisdiction, combo_centroids)
rm(ls = joined_parcels)
##Import Assembly and Senate Districts
assembly <- sf::st_read('C:/Dev/CA_spatial_data/SoCalLegislativePolygons.geojson') |>
st_transform(crs = 4326)
senate <- sf::st_read('C:/Dev/CA_spatial_data/SenateDistrictsCA.geojson') |>
st_transform(crs = 4326) |>
st_filter(Counties) |>
select(SenateDistrictLabel, geometry) |>
rename(DistrictLabel = SenateDistrictLabel) #|>
districts <- bind_rows(assembly, senate)
rm(ls = assembly, senate)
setwd(app_dir)
save.image('.RData')
setwd(warehouse_dir)
save.image('.RData')
setwd(shapefile_dir)
unlink('finalParcels.shp')
st_write(combo_final, 'finalParcels.shp', append = FALSE)
